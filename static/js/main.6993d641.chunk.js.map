{"version":3,"sources":["grass.jpg","Ground.js","Camera.js","PointerLockControls.js","usePlayerControls.js","Player.js","dirt.jpg","state.js","Cube.js","useCubeStore.js","App.js","reportWebVitals.js","index.js"],"names":["Ground","props","usePlane","rotation","Math","PI","ref","texture","TextureLoader","load","grass","wrapS","RepeatWrapping","wrapT","repeat","set","receiveShadow","attach","args","map","color","Camera","useRef","useThree","setDefaultCamera","extend","PointerLockControlsImpl","PointerLockControls","camera","gl","controls","useEffect","document","addEventListener","current","lock","domElement","moveFieldByKey","key","KeyW","KeyS","KeyA","KeyD","Space","Player","useState","moveForward","moveBackward","moveLeft","moveRight","jump","movement","setMovement","handleKeyDown","e","m","code","handleKeyUp","removeEventListener","usePlayerControls","useSphere","mass","type","position","api","velocity","subscribe","v","useFrame","copy","direction","Vector3","frontVector","Number","sideVector","subVectors","normalize","multiplyScalar","applyEuler","x","z","abs","toFixed","$cubes","atom","default","Cube","hover","addCube","setCubes","useSetRecoilState","y","cubes","nanoid","useSetCube","dirt","useBox","onPointerMove","stopPropagation","floor","faceIndex","onPointerOut","onClick","Array","_","index","attachArray","Cubes","useRecoilValue","App","shadowMap","sRGB","alpha","Sky","sunPosition","intensity","castShadow","gravity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6993d641.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/grass.eb5fc8eb.jpg\";","import React from \"react\";\r\nimport { RepeatWrapping, TextureLoader } from \"three\";\r\nimport { usePlane } from \"@react-three/cannon\";\r\nimport grass from \"./grass.jpg\";\r\nexport  const Ground = (props) => {\r\n  const [ref] = usePlane(() => ({ rotation: [-Math.PI / 2, 0, 0], ...props }));\r\n  const texture = new TextureLoader().load(grass);\r\n\r\n  texture.wrapS = RepeatWrapping;\r\n  texture.wrapT = RepeatWrapping;\r\n  texture.repeat.set(240, 240);\r\n\r\n  return (\r\n    <mesh ref={ref} receiveShadow>\r\n      <planeBufferGeometry attach=\"geometry\" args={[1009, 1000]} />\r\n      <meshStandardMaterial map={texture} attach=\"material\" color=\"green\" />\r\n    </mesh>\r\n  );\r\n};\r\n\r\n","import React, { useRef, useEffect } from 'react';\r\nimport { useThree } from 'react-three-fiber';\r\n\r\nexport const Camera = props => {\r\n  const ref = useRef();\r\n  const {setDefaultCamera} = useThree();\r\n\r\n\r\n\r\n  return <perspectiveCamera ref={ref} {...props} />;\r\n};","import React, { useEffect } from 'react';\r\nimport { PointerLockControls as PointerLockControlsImpl } from 'three/examples/jsm/controls/PointerLockControls';\r\nimport { useThree, extend } from 'react-three-fiber';\r\nimport { useRef } from 'react';\r\n\r\nextend({ PointerLockControlsImpl });\r\n\r\nexport const PointerLockControls = props => {\r\n  const { camera, gl } = useThree();\r\n  const controls = useRef();\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('click', () => {\r\n      controls.current.lock();\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <pointerLockControlsImpl\r\n      ref={controls}\r\n      args={[camera, gl.domElement]}\r\n      {...props}\r\n    />\r\n  );\r\n};","import { useState, useEffect } from 'react';\r\n\r\nfunction moveFieldByKey(key) {\r\n  const keys = {\r\n    KeyW: 'moveForward',\r\n    KeyS: 'moveBackward',\r\n    KeyA: 'moveLeft',\r\n    KeyD: 'moveRight',\r\n    Space: 'jump'\r\n  };\r\n  return keys[key];\r\n}\r\n\r\nexport const usePlayerControls = () => {\r\n  const [movement, setMovement] = useState({\r\n    moveForward: false,\r\n    moveBackward: false,\r\n    moveLeft: false,\r\n    moveRight: false,\r\n    jump: false\r\n  });\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = e => {\r\n      setMovement(m => ({\r\n        ...m,\r\n        [moveFieldByKey(e.code)]: true\r\n      }));\r\n    };\r\n    const handleKeyUp = e => {\r\n      setMovement(m => ({\r\n        ...m,\r\n        [moveFieldByKey(e.code)]: false\r\n      }));\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    document.addEventListener('keyup', handleKeyUp);\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n      document.removeEventListener('keyup', handleKeyUp);\r\n    };\r\n  }, []);\r\n\r\n  return movement;\r\n};","import React, { useEffect, useRef } from 'react';\r\nimport { useSphere } from '@react-three/cannon';\r\nimport { useThree, useFrame } from 'react-three-fiber';\r\nimport { PointerLockControls } from './PointerLockControls';\r\nimport { usePlayerControls } from './usePlayerControls';\r\nimport { Vector3 } from 'three';\r\n\r\nconst SPEED = 5;\r\n\r\nexport const Player = props => {\r\n  const { camera } = useThree();\r\n  const {\r\n    moveForward,\r\n    moveBackward,\r\n    moveLeft,\r\n    moveRight,\r\n    jump\r\n  } = usePlayerControls();\r\n  const [ref, api] = useSphere(() => ({\r\n    mass: 1,\r\n    type: 'Dynamic',\r\n    position: [0, 10, 0],\r\n    ...props\r\n  }));\r\n\r\n  const velocity = useRef([0, 0, 0]);\r\n  useEffect(() => {\r\n    api.velocity.subscribe(v => (velocity.current = v));\r\n  }, [api.velocity]);\r\n\r\n  useFrame(() => {\r\n    camera.position.copy(ref.current.position);\r\n    const direction = new Vector3();\r\n\r\n    const frontVector = new Vector3(\r\n      0,\r\n      0,\r\n      Number(moveBackward) - Number(moveForward)\r\n    );\r\n    const sideVector = new Vector3(Number(moveLeft) - Number(moveRight), 0, 0);\r\n\r\n    direction\r\n      .subVectors(frontVector, sideVector)\r\n      .normalize()\r\n      .multiplyScalar(SPEED)\r\n      .applyEuler(camera.rotation);\r\n\r\n    api.velocity.set(direction.x, velocity.current[1], direction.z);\r\n\r\n    if (jump && Math.abs(velocity.current[1].toFixed(2)) < 0.05) {\r\n      api.velocity.set(velocity.current[0], 10, velocity.current[2]);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <PointerLockControls />\r\n      <mesh ref={ref} />\r\n    </>\r\n  );\r\n};","export default __webpack_public_path__ + \"static/media/dirt.59ed3279.jpg\";","  \r\nimport { atom } from 'recoil';\r\n\r\nexport const $cubes = atom({\r\n  key: 'cubes',\r\n  default: []\r\n});","import React, { useState } from 'react';\r\n\r\nimport { useBox } from '@react-three/cannon';\r\n\r\nimport dirt from './dirt.jpg';\r\nimport { TextureLoader } from 'three';\r\n\r\nimport { useSetCube } from './useCubeStore';\r\n\r\nexport const Cube = props => {\r\n  const [hover, set] = useState(null);\r\n  const addCube = useSetCube();\r\n\r\n  const texture = new TextureLoader().load(dirt);\r\n\r\n  const [ref] = useBox(() => ({\r\n    type: 'Static',\r\n    ...props\r\n  }));\r\n\r\n  return (\r\n    <mesh\r\n      ref={ref}\r\n      onPointerMove={e => {\r\n        e.stopPropagation();\r\n        set(Math.floor(e.faceIndex / 2));\r\n      }}\r\n      onPointerOut={() => set(null)}\r\n      onClick={e => {\r\n        e.stopPropagation();\r\n\r\n        const faceIndex = Math.floor(e.faceIndex / 2);\r\n        const { x, y, z } = ref.current.position;\r\n\r\n        switch (faceIndex) {\r\n          case 4: {\r\n            addCube(x, y, z + 1);\r\n            return;\r\n          }\r\n          case 2: {\r\n            addCube(x, y + 1, z);\r\n            return;\r\n          }\r\n          case 1: {\r\n            addCube(x - 1, y, z);\r\n            return;\r\n          }\r\n          case 5: {\r\n            addCube(x, y, z - 1);\r\n            return;\r\n          }\r\n          case 3: {\r\n            addCube(x, y - 1, z);\r\n            return;\r\n          }\r\n          default: {\r\n            addCube(x + 1, y, z);\r\n            return;\r\n          }\r\n        }\r\n      }}\r\n    >\r\n      {[...Array(6)].map((_, index) => (\r\n        <meshStandardMaterial\r\n          attachArray=\"material\"\r\n          map={texture}\r\n          key={index}\r\n          color={hover === index ? 'grey' : 'white'}\r\n        />\r\n      ))}\r\n      <boxBufferGeometry attach=\"geometry\" />\r\n    </mesh>\r\n  );\r\n};","\r\nimport React from 'react';\r\nimport { useSetRecoilState, useRecoilValue } from 'recoil';\r\nimport { nanoid } from 'nanoid';\r\n\r\nimport { $cubes } from './state';\r\nimport { Cube } from './Cube';\r\n\r\nexport const useCube = () => useRecoilValue($cubes);\r\n\r\nexport const useSetCube = () => {\r\n  const setCubes = useSetRecoilState($cubes);\r\n  return (x, y, z) =>\r\n    setCubes(cubes => [...cubes, <Cube key={nanoid()} position={[x, y, z]} />]);\r\n};","import { Physics } from '@react-three/cannon';\nimport { Sky } from '@react-three/drei';\nimport {Canvas} from 'react-three-fiber';\nimport { RecoilRoot } from 'recoil';\nimport { Vector3 } from 'three';\nimport { Ground } from './Ground';\nimport { Camera } from './Camera';\nimport { Player } from './Player';\nimport { Cube } from './Cube';\nimport { useCube } from './useCubeStore';\n\n// drei -> Helpers \n// use-cannon - For using Physics \n// zustand -> Use to manage state, and store the cubes\n// nanoid -> to generate id for each distingush cube\n// recoil -> set of utilities for state management with React.\n\nconst Cubes = () => {\n  const cubes = useCube();\n  return [<Cube position={[0, 0.5, -10]} />, ...cubes];\n};\n\nconst App = () => (\n  <Canvas shadowMap sRGB gl={{ alpha: false }}>\n    <RecoilRoot>\n      <Camera/>\n      <Sky sunPosition={new Vector3(100, 10, 100)} />\n      <ambientLight intensity={0.3} />\n      <pointLight castShadow intensity={0.8} position={[100, 100, 100]} />\n      <Physics gravity={[0, -30, 0]}>\n        <Ground />\n        <Player />\n        <Cubes />\n      </Physics>\n    </RecoilRoot>\n  </Canvas>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}